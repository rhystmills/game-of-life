<!DOCTYPE html>
	<html>
	<head>
			<meta charset="utf-8">
			<meta http-equiv="X-UA-Compatible" content="IE=edge">
			<title></title>
      <style>
      *{
        font-family:"arial";
      }
      p{
        line-height: 10px;
      }
      .square{
        display: inline-block;
        box-sizing: border-box;
        width:5px;
        height: 5px;
        padding: 5px;
        margin: 1px;
        border-width: 1px;
        border-color: #ddd;
        border-style: solid;
      }
      body{
        overflow: scroll;
      }
      div{
        box-sizing: border-box;
        margin: 0px;
      }
      .gridBody{
				white-space : nowrap;
        min-height:150%;
        padding: 20px;
        margin: 0px;
        border: 0px;
      }
      .black{
        background-color: #333;
        border-color: #333;
      }
      .orange{
        background-color: #f81;
        border-color: #f81;
      }
      .paleorange{
        background-color:#fb8;
        border-color: #fb8;
      }
      .grey{
        background-color: #ddd;
        border-color: #ddd;
      }
      .mtop{
        margin-top:10px;
      }
      .mbottom{
        margin-bottom:10px;
      }
      .button{
        border-style: none;
        box-sizing: content-box;
        padding:5px;
        font-weight: 600;
        padding-left:10px;
        padding-right: 10px;
        border-radius: 16px;
        box-shadow: 1px 1px 4px rgba(0, 0, 0, .2);
      }
      .form{
        display: inline-block;
        margin-left: 10px;
      }
      .hiddenButton{
        border:0;
        padding:0;
        font-size:0px;
        height: 0px;
        width: 0px;
        display: inline;
      }
      .gridSizer{
        display: block;
      }

      .rightAligned{
        min-width: 90px;
        text-align: right;
        display: inline-block;
        box-sizing: content-box;
      }
      .leftAligned{
        display: inline-block;
      }

      .marginAll{
        margin: 5px;
      }
      .marginVert{
        margin-bottom: 5px;
        margin-top: 5px;
      }
      .marginHori{
        margin-left: 5px;
        margin-right: 5px;
      }
      .button:focus{
        outline: none;
      }
      .lightbutton{
        color: #58e;
        background: #fff;
      }
      .lightbutton:hover{
        background: #fefefe;
        color: #25a;
      }
      .lightbutton:active{
        background: #eee;
        color: #037;
        box-shadow: 1px 1px 3px rgba(0, 0, 0, .1);
      }
      .darkbutton{
        /* background-color: #ddd; */
        background: #58e;
        box-shadow: 1px 1px 3px rgba(0, 0, 0, .1);
        color: #fff;
      }
      .darkbutton:hover{
        background: #25a;
        color: #f7f7f7;
      }
      .darkbutton:active{
        background: #037;
        color: #eee;
      }
      div{
        margin:0px;
        border:0px;
        box-sizing: border-box;
        line-height: 10px;
      }
      </style>
			<link rel="stylesheet" href="">
      <script type="text/javascript">

      window.onload = function(){
        document.getElementById("para").innerHTML=textGrid;
        let commandForm=document.getElementById('commandForm');
      }

      //Form Handler for grid sizers

      window.addEventListener("load", commandInit);
      window.addEventListener("load", commandInit2);

      function commandInit(){
        commandForm.onsubmit=submitForm;
      }
      function commandInit2(){
        commandForm2.onsubmit=submitForm2;
      }

      function submitForm(){
        console.log(event);
        let command = commandForm["gridField"].value.toUpperCase();
        console.log(command);
        commandForm.reset();
        event.preventDefault();
        //Needs to check input is only numeric chars
        var isNum = /^\d+$/.test(command);
        if (isNum){
          console.log("That's a number");
          gridWidth=parseInt(command,10);
          myArray=createGrid(gridWidth,gridHeight);
          updateArray();
        }
        else {
          console.log("Not a number");
        }
      }
      function submitForm2(){
        console.log(event);
        let command = commandForm2["gridField2"].value.toUpperCase();
        console.log(command);
        commandForm2.reset();
        event.preventDefault();
        //Needs to check input is only numeric chars
        var isNum = /^\d+$/.test(command);
        if (isNum){
          console.log("That's a number");
          gridHeight=parseInt(command,10);
          myArray=createGrid(gridWidth,gridHeight);
          updateArray();
        }
        else {
          console.log("Not a number");
        }
      }

      //grid creator
      function createGrid(x,y){
        let array=[];
        for(let i=0;i<(y+2);i++){
          array.push([]);
          for(let j=0;j<(x+2);j++){
            array[i].push(0);
          }
        }
        return array;
      }
      let gridWidth=20;
      let gridHeight=30;
      let myArray=createGrid(gridWidth,gridHeight);
      myArray[2][2]=1;
      myArray[2][3]=1;
      myArray[2][4]=1;
      myArray[3][2]=1
      myArray[4][3]=1;
      let textGrid=arrayToText(myArray);
      // console.log(myArray);


      function buildNew(array){
        let newArray=[[]];
        //Next array is a helper
        let neighbourArray=[];
        //Loop of majoy array
        for(a=0;a<array[0].length;a++){
          newArray[0].push(0);
        }
        for (let i=1;i<(array.length-1);i++){
          newArray.push([]);
          let currentArray=array[i];
          newArray[i].push(0);

          //Loop of minor arrays
          for (let j=1;j<(currentArray.length-1);j++){
            let neighbours=0;

            //Count value of surround arrays
            for(let x=i-1;x<=i+1;x++){
              for(let y=j-1;y<=j+1;y++){
                //Don't count the square itself as a neighbour
                if(x===i&&y===j){
                }
                //Only count surrounding squares
                else if (array[x][y]===1){
                  neighbours++;
                }
              }
            }
            //Array of neighbour counts for debugging purposes
            neighbourArray.push(neighbours);
            //Do things based on the count of neighbours
            if (neighbours<2){
              //Numbers above 1 relate to background colour
              if (array[i][j]===1){
                newArray[i].push(2);
              }
              else if (array[i][j]===2){
                newArray[i].push(3);
              }
              else if (array[i][j]===3||array[i][j]===4){
                newArray[i].push(4);
              }
              else newArray[i].push(0);
            }
            else if (neighbours>3){
              if (array[i][j]===1){
                newArray[i].push(2);
              }
              else if (array[i][j]===2) newArray[i].push(3);
              else if (array[i][j]===3||array[i][j]===4) newArray[i].push(4);
              else newArray[i].push(0);
            }
            else if (neighbours===2){
              if (array[i][j]===1){
                newArray[i].push(1);
              }
              else if (array[i][j]===2){
                newArray[i].push(3);
              }
              else if (array[i][j]===3||array[i][j]===4){
                newArray[i].push(4);
              }
              else newArray[i].push(0);
            }
            else if (neighbours===3){
              newArray[i].push(1);
            }
            // console.log(countNeighbours(array,i,j));
          }
          newArray[i].push(0);
        }
        newArray.push([]);
        for(a=0;a<array[0].length;a++){
          newArray[array.length-1].push(0);
        }
        // console.log("n"+neighbourArray);

        //Set the 0 and array.length rows to replicate the boundaries of the visible grid
        ilength=newArray.length-1;
        jlength=newArray[0].length-1;
        //Handle the corners first
        newArray[0][0]=newArray[ilength-1][jlength-1];
        newArray[0][jlength]=newArray[ilength-1][1];
        newArray[ilength][0]=newArray[1][jlength-1];
        newArray[ilength][jlength]=newArray[1][1];
        //Then loop the top and bottom rows ignoring corners
        for(j=1;j<newArray[0].length-1;j++){
          newArray[0][j]=newArray[ilength-1][j];
          newArray[ilength][j]=newArray[1][j];
        }
        //Then loop the left and right rows ignoring corners
        for(i=1;i<newArray.length-1;i++){
          newArray[i][0]=newArray[i][jlength-1];
          newArray[i][jlength]=newArray[i][1];
        }

        return newArray;
      }

      function togglePoint(i,j){
        let element=myArray[i][j];
        if(element===0||element===2||element===3||element===4||element===5){
          myArray[i][j]=1;
        }
        else if(element===1){
          myArray[i][j]=0;
        }
        textGrid=arrayToText(myArray);
        document.getElementById("para").innerHTML=textGrid;
      }

      function updateArray(){
        myArray=buildNew(myArray);
        textGrid=arrayToText(myArray);
        document.getElementById("para").innerHTML=textGrid;
        // console.log(myArray);
      }
      let toggledOn=false;
      let thisTimer=0;
      function clickToggle() {
        if(toggledOn===false){
           toggledOn=true;
           // toggleButton.classlist.add("darkbutton");
            toggleButton = document.getElementById("togBut");
           toggleButton.outerHTML=`<input id="togBut" type="button" value="Run automatically" onclick="clickToggle();" class="button darkbutton"></input>`;
           console.log(toggleButton.classlist);
           console.log(toggleButton);
           console.log("button should be dark");
        }
        else if(toggledOn===true){
          console.log("clearing Interval");
          toggledOn=false;
          toggleButton = document.getElementById("togBut");
          toggleButton.outerHTML=`<input id="togBut" type="button" value="Run automatically" onclick="clickToggle();" class="button lightbutton"></input>`;
          clearInterval(thisTimer);
        }
        if (toggledOn===true){
          thisTimer = setInterval(function() { updateArray(); }, 100);
        }
      }

      function arrayToText(array){
        let text="";
        for (let i=1;i<(array.length-1);i++){
          let currentArray=array[i];
          for (let j=1;j<(currentArray.length-1);j++){
            if (array[i][j]===1){
              text+=`<a class='square black' onmousedown="togglePoint(${i},${j})"></a>`;
            }
            else if (array[i][j]===2){
              text+=`<a class='square orange' onmousedown="togglePoint(${i},${j})"></a>`
            }
            else if (array[i][j]===3){
              text+=`<a class='square paleorange' onmousedown="togglePoint(${i},${j})"></a>`
            }
            else if (array[i][j]===4){
              text+=`<a class='square grey' onmousedown="togglePoint(${i},${j})"></a>`
            }
            else text+=`<a class='square' onmousedown="togglePoint(${i},${j})"></a>`;
            // console.log(countNeighbours(array,i,j));
          }
        text=text+"<br/>";
        }
        return text;
      }
      // console.log(arrayToText(myArray));

      function gridSize(axis,direction){
        if(axis==="width"){
          if (direction==="up") gridWidth++;
          else if (direction="down") gridWidth--;
        }
        else if(axis==="height"){
          if (direction==="up") gridHeight++;
          else if (direction==="down") gridHeight--;
        }
        myArray=createGrid(gridWidth,gridHeight)
        updateArray();
      }

      </script>
	</head>
	<body>
    <div class="buttons">
      <input id="theButton" type="button" value="Increment" onclick="updateArray();" class="button lightbutton marginAll"></button>
      <input id="togBut" type="button" value="Run automatically" onclick="clickToggle();" class="button lightbutton"></input>
      <div id="gridSizer" class="gridSizer mtop mbottom">
          <div class="rightAligned">Grid width:</div>
          <div class="leftAligned">
            <input id="gridWidthDown" type="button" value="-" onclick="gridSize('width','down');" class="button lightbutton marginHori"></input>
            <input id="gridWidthUp" type="button" value="+" onclick="gridSize('width','up');" class="button lightbutton"></input>
            <form id="commandForm" class="form" method="post">
              <input id="gridField" type="text" class="textInput"></input>
              <input type="submit" name="submitButton" type="button" class="hiddenButton" autocomplete="off"></input>
            </form>
          </div>
      </div>
      <div id="gridSizer" class="gridSizer mtop mbottom">
        <div class="rightAligned">Grid height:</div>
        <div class="leftAligned">
          <input id="gridHeightDown" type="button" value="-" onclick="gridSize('height','down');" class="button lightbutton marginHori"></input>
          <input id="gridHeightUp" type="button" value="+" onclick="gridSize('height','up');" class="button lightbutton"></input>
          <form id="commandForm2" class="form" method="post">
            <input id="gridField2" type="text" class="textInput"></input>
            <input type="submit" name="submitButton" type="button" class="hiddenButton" autocomplete="off"></input>
          </form>
        </div>
      </div>
    </div>
    <div id="para" class="gridBody">Hello</div>
    <div id="neighbourGrid"></div>
    <script> let toggleButton = document.getElementById("togBut"); </script>
	</body>
</html>
